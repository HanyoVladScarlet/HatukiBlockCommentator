@page "/file-comment"
@using HatukiBlockCommentator.Utils

<PageTitle>Hatuki Block Commentator ⭐</PageTitle>

<h3>File Commentator</h3>
<div class="container">
    <div class="row">
        <div class="col-">
            <label>IsPython : </label>
            <input type="checkbox" @bind="IsPython" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>Project Name : </label>
            <input @bind="ProjectName" />
        </div>
        <div class="col">
            <label>File Name : </label>
            <input @bind="FileName" />
        </div>
        <div class="col">
            <label>Description : </label>
            <input @bind="Description" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>Creator : </label>
            <input @bind="Creator" />
        </div>
        <div class="col">
            <label>Create Date : </label>
            <input @bind="Create" />
        </div>
        <div class="col">
            <label>Update Date : </label>
            <input @bind="Update" />
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <label>Events :</label>
        <textarea @bind="EventText" />
    </div><div class="row">
        <label>Fields :</label>
        <textarea @bind="FieldText" />
    </div><div class="row">
        <label>Methods :</label>
        <textarea @bind="MethodText" />
    </div>

</div>

<button class="btn btn-primary" @onclick="Generate">Generate</button>

@* <div class="container">
    <ul id="field-list">
        <li>
            Name: <input disabled placeholder="DemoEvent" /> Description : <input disabled placeholder="Add events here." />
            <button class="btn" @onclick="() => ModifyEvent(-1, true)">+</button>
            <button class="btn" disabled>-</button>
        </li>
        @foreach (var line in EventLines)
        {
            <li>
                Name: <input @bind="line.Name" /> Description : <input @bind="line.Info" />
                <button class="btn" @onclick="() => ModifyEvent(EventLines.IndexOf(line), true)">+</button>
                <button class="btn" @onclick="() => ModifyEvent(EventLines.IndexOf(line), false)">-</button>
            </li>
        }
    </ul>
</div>

<div class="container">
    <ul id="function-list">
        <li>
            Name: <input disabled placeholder="DemoField" /> Description : <input disabled placeholder="Add fields here." />
            <button class="btn" @onclick="() => ModifyField(-1, true)">+</button>
            <button class="btn" disabled>-</button>
        </li>
        @foreach (var line in FieldLines)
        {
            <li>
                Name: <input @bind="line.Name" /> Description : <input @bind="line.Info" />
                <button class="btn" @onclick="() => ModifyField(FieldLines.IndexOf(line), true)">+</button>
                <button class="btn" @onclick="() => ModifyField(FieldLines.IndexOf(line), false)">-</button>
            </li>
        }
    </ul>
</div>

<div class="container">
    <ul id="function-list">
        <li>
            Name: <input disabled placeholder="DemoField" /> Description : <input disabled placeholder="Add fields here." />
            <button class="btn" @onclick="() => ModifyField(-1, true)">+</button>
            <button class="btn" disabled>-</button>
        </li>
        @foreach (var line in MethodLines)
        {
            <li>
                Name: <input @bind="line.Name" /> Description : <input @bind="line.Info" />
                <button class="btn" @onclick="() => ModifyMethod(MethodLines.IndexOf(line), true)">+</button>
                <button class="btn" @onclick="() => ModifyMethod(MethodLines.IndexOf(line), false)">-</button>
            </li>
        }
    </ul>
</div> *@

<textarea style="width:1920px;height:1920px;font-family:consolas">@_comments</textarea>

@code {
    private string? _comments;
    private bool IsPython { get; set; } = false;
    private int Width { get; set; } = 96;
    private bool IsMemberBlock { get; set; } = false;
    private string? ProjectName { get; set; } = "My Project";
    private string? FileName { get; set; } = "My File";
    private string? Description { get; set; } = "-";
    private string? Creator { get; set; } = "Anonymous";
    private string? Create { get; set; }
    private string? Update { get; set; }
    private string? EventText { get; set; } = string.Empty;
    private string? FieldText { get; set; } = string.Empty;
    private string? MethodText { get; set; } = string.Empty;

    private IList<ItemLine> EventLines = new List<ItemLine>();
    private IList<ItemLine> FieldLines = new List<ItemLine>();
    private IList<ItemLine> MethodLines = new List<ItemLine>();

    private class ItemLine { public string Name { get; set; } public string Info { get; set; } }

    private void ModifyMethod(int idx, bool additive = true)
    {
        if (additive) MethodLines.Insert(idx + 1, new ItemLine { Name = "MyMethod", Info = "-" });
        else MethodLines.RemoveAt(idx);
        // return new EventCallback();
    }

    private void ModifyEvent(int idx, bool additive = true)
    {
        if (additive) EventLines.Insert(idx + 1, new ItemLine { Name = "MyEvent", Info = "-" });
        else EventLines.RemoveAt(idx);
        // return new EventCallback();
    }

    private void ModifyField(int idx, bool additive = true)
    {
        if (additive) FieldLines.Insert(idx + 1, new ItemLine { Name = "MyField", Info = "-" });
        else FieldLines.RemoveAt(idx);
        // return new EventCallback();
    }


    private void Generate()
    {
        var commentator = BlockCommentator.CreateInstance();
        commentator.SetIsPython(IsPython).SetWidth(Width).SetIsMember(IsMemberBlock)
            .SetProjectName(ProjectName).SetFileName(FileName).SetDescription(Description)
            .SetProgrammer(Creator);

        var succ = DateTime.TryParse(Create, out var res);
        commentator.SetCreate(succ ? res : DateTime.Now);
        succ = DateTime.TryParse(Update, out res);
        commentator.SetUpdate(succ ? res : DateTime.Now);
        // foreach (var line in EventLines) commentator.AppendEvent(line.Name, line.Info);
        // foreach (var line in FieldLines) commentator.AppendField(line.Name, line.Info);
        // foreach (var line in MethodLines) commentator.AppendMethod(line.Name, line.Info);
        foreach (var line in EventText.Split('\n', StringSplitOptions.RemoveEmptyEntries))
        {
            try
            {
                var ss = line.Split(',', StringSplitOptions.RemoveEmptyEntries);
                commentator.AppendEvent(ss[0], ss[1]);
            }
            catch { }
        }foreach (var line in FieldText.Split('\n', StringSplitOptions.RemoveEmptyEntries))
        {
            try
            {
                var ss = line.Split(',', StringSplitOptions.RemoveEmptyEntries);
                commentator.AppendField(ss[0], ss[1]);
            }
            catch { }
        }foreach (var line in MethodText.Split('\n', StringSplitOptions.RemoveEmptyEntries))
        {
            try
            {
                var ss = line.Split(',', StringSplitOptions.RemoveEmptyEntries);
                commentator.AppendMethod(ss[0], ss[1]);
            }
            catch { }
        }

        _comments = commentator.Generate();
        // commentator.Updater =
    }

}